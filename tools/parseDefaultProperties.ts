/// <reference types="kolmafia" />
import { writeFile } from "fs/promises";
import path from "path";
import nodeFetch from "node-fetch";

const PROPS_FILE =
  "https://raw.githubusercontent.com/kolmafia/kolmafia/main/src/data/defaults.txt";

const TYPES_FILE = path.join(__dirname, "../src/propertyTypes.ts");

export function hasNumericDefault(property: string, value: string): boolean {
  return !isNaN(Number(value)) && !isNaN(parseFloat(value));
}

const numericOrStringProperties = [
  "statusEngineering",
  "statusGalley",
  "statusMedbay",
  "statusMorgue",
  "statusNavigation",
  "statusScienceLab",
  "statusSonar",
  "statusSpecialOps",
  "statusWasteProcessing",
];
const choiceAdventurePattern = /^choiceAdventure\d+$/;
export function isNumericOrStringProperty(property: string): boolean {
  if (numericOrStringProperties.includes(property)) return true;
  return choiceAdventurePattern.test(property);
}

const fakeBooleans = ["_jickJarAvailable"];
function hasBooleanDefault(property: string, defaultValue: string): boolean {
  if (fakeBooleans.includes(property)) return false;
  return ["true", "false"].includes(defaultValue);
}

const otherLocations = [
  "nextSpookyravenElizabethRoom",
  "nextSpookyravenStephenRoom",
  "sourceOracleTarget",
];
export function isLocationProperty(property: string): boolean {
  return otherLocations.includes(property) || property.endsWith("Location");
}

const otherMonsters = ["romanticTarget", "yearbookCameraTarget"];
const fakeMonsters = ["trackVoteMonster"];
export function isMonsterProperty(property: string): boolean {
  if (otherMonsters.includes(property)) return true;
  return property.endsWith("Monster") && !fakeMonsters.includes(property);
}

export function isFamiliarProperty(property: string): boolean {
  return property.endsWith("Familiar");
}

const statProps = ["nsChallenge1", "shrugTopper", "snojoSetting"];
export function isStatProperty(property: string): boolean {
  return statProps.includes(property);
}

const phylumProps = ["dnaSyringe"];
export function isPhylumProperty(property: string): boolean {
  return phylumProps.includes(property) || property.endsWith("Phylum");
}

async function main() {
  const response = await nodeFetch(PROPS_FILE);
  const text = await response.text();
  const props = text.split("\n");

  const propTypes: { [key: string]: string[] } = {
    BooleanProperty: [],
    NumericProperty: [],
    MonsterProperty: [],
    LocationProperty: [],
    StringProperty: [],
    NumericOrStringProperty: [],
    FamiliarProperty: [],
    StatProperty: [],
    PhylumProperty: [],
  };

  for (const prop of props) {
    const [, property, defaultValue] = prop.split("\t");
    if (!property) continue;

    if (isMonsterProperty(property)) {
      propTypes.MonsterProperty.push(property);
    } else if (isLocationProperty(property)) {
      propTypes.LocationProperty.push(property);
    } else if (isStatProperty(property)) {
      propTypes.StatProperty.push(property);
    } else if (isFamiliarProperty(property)) {
      propTypes.FamiliarProperty.push(property);
    } else if (isPhylumProperty(property)) {
      propTypes.PhylumProperty.push(property);
    } else if (isNumericOrStringProperty(property)) {
      propTypes.NumericOrStringProperty.push(property);
    } else if (!defaultValue) {
      propTypes.StringProperty.push(property);
    } else if (hasBooleanDefault(property, defaultValue)) {
      propTypes.BooleanProperty.push(property);
    } else if (hasNumericDefault(property, defaultValue)) {
      propTypes.NumericProperty.push(property);
    } else {
      propTypes.StringProperty.push(property);
    }
  }

  let contents = `/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */\n`;

  Object.entries(propTypes).forEach(([type, values]) => {
    // e.g. StringProperty -> stringProperties
    const typeLower = `${type[0].toLowerCase()}${type.slice(1, -1)}ies`;
    console.log(`Storing ${values.length} props of type ${type}`);
    contents += `export const ${typeLower} = [${values
      .map((v) => `"${v}"`)
      .join(", ")}] as const;\n`;
    contents += `export type ${type} = typeof ${typeLower}[number];\n`;
  });

  await writeFile(TYPES_FILE, contents);
}

main();
