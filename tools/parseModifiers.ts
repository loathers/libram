import { writeFile } from "fs/promises";
import path from "path";
import url from "url";
import {
  BaseJavaCstVisitorWithDefaults,
  EnumConstantCstNode,
  EnumConstantListCtx,
  ExpressionCtx,
  parse,
} from "java-parser";
import nodeFetch from "node-fetch";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

const MODIFIERS_SOURCE_ROOT =
  "https://raw.githubusercontent.com/kolmafia/kolmafia/main/src/net/sourceforge/kolmafia/modifiers";

const MODIFIERS_FILE = path.join(__dirname, "../src/modifierTypes.ts");

const tc = (name: string) => name.charAt(0).toUpperCase() + name.slice(1);

// Use "BaseJavaCstVisitor" if you need to implement all the visitor methods yourself.
class ModifiersVisitor extends BaseJavaCstVisitorWithDefaults {
  modifiers: string[] = [];

  constructor() {
    super();
    this.validateVisitor();
  }

  processModifier(expression: ExpressionCtx) {
    const literal =
      expression.conditionalExpression?.[0].children.binaryExpression[0]
        .children.unaryExpression[0].children.primary[0].children
        .primaryPrefix[0].children.literal?.[0].children.StringLiteral?.[0]
        .image;

    if (!literal) return;

    const unquoted = literal.substring(1, literal.length - 1);

    this.modifiers.push(unquoted);
  }

  processModifiers(list: EnumConstantCstNode[]) {
    list.forEach((v) => {
      const modifier =
        v.children.argumentList?.[0].children.expression[0].children;
      if (modifier) {
        this.processModifier(modifier);
      }
    });
  }

  enumConstantList(ctx: EnumConstantListCtx) {
    const list = ctx.enumConstant;

    if (list) {
      this.processModifiers(list);
    }
  }
}

async function parseSingleFile(path: string) {
  const response = await nodeFetch(path);
  const text = await response.text();
  const cst = parse(text);

  const visitor = new ModifiersVisitor();
  visitor.visit(cst);

  return visitor.modifiers;
}

async function main() {
  const modifiers: Record<string, string[]> = {
    string: [],
    boolean: [],
    double: [],
  };

  for (const type of Object.keys(modifiers)) {
    const path = `${MODIFIERS_SOURCE_ROOT}/${tc(type)}Modifier.java`;
    modifiers[type] = await parseSingleFile(path);
  }

  let contents = `// THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseModifiers.ts for more information\n`;

  Object.entries(modifiers).forEach(([type, values]) => {
    const typeName = type === "double" ? "numeric" : type;
    console.log(`Storing ${values.length} props of type ${typeName}`);
    contents += `export const ${typeName}Modifiers = ${JSON.stringify(
      values,
    )} as const;\n`;
    contents += `export const ${typeName}ModifiersSet = new Set(${typeName}Modifiers);\n`;
    contents += `export type ${tc(
      typeName,
    )}Modifier = typeof ${typeName}Modifiers[number];\n`;
  });

  contents += `export type ModifierType = NumericModifier | StringModifier | BooleanModifier;\n`;

  await writeFile(MODIFIERS_FILE, contents);
}

main();
